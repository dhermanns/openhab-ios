# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Generate new localized screenshots"
  lane :screenshots do
    capture_screenshots(workspace: "openHAB.xcworkspace",
		        scheme: "openHABUITests",
			dark_mode: false)
  end

  desc 'Run unit tests.'
  lane :unittests do
      run_tests(
          workspace: 'openHAB.xcworkspace',
          scheme: 'openHABTestsSwift',
          devices: ['iPhone 11 Pro']
      )
  end


  desc "Build beta"
  lane :beta do |lane|

    # check the semantic parameter entered
    if !lane[:bump]
        raise "No bump type defined! Use one of: patch | minor | major".red
    end

    ensure_git_branch(
        branch: "(master|develop|release\\S+|hotfix\\S+)"
    )

    # ensure that master branch is clean
    ensure_git_status_clean

    # run unit tests
    #unittests

    increment_build_number(
      build_number: Time.now.to_i
    )

    type = lane[:bump]

    increment_version_number(
           bump_type: type,
           xcodeproj: "openHAB.xcodeproj"
    )

    build_number = get_build_number
    version = get_version_number(xcodeproj: "openHAB.xcodeproj",
                                        target: "openHAB")

    # get the last commit comments from Git history
    # and creates our changelog
    comments = changelog_from_git_commits(
          between: [last_git_tag, "HEAD"],
          pretty: "- %s",
          date_format: "short",
          match_lightweight_tag: false,
          merge_commit_filtering: "exclude_merges"
    )

    changelog = read_changelog # Read changelog
  
    stamp_changelog(section_identifier: "Version #{version}, Build #{build_number}") # Stamp Unreleased section with newly released build number

    clean_build_artifacts

    # commit to git the changes from bumping version number
    commit_version_bump(message: "Committed version bump",
                        xcodeproj: "openHAB.xcodeproj",
                        force: true)

    # push bump commit
    push_to_git_remote

    # create a local tag with the new version
    add_git_tag(
        message: changelog,
        tag: "#{version}")

    # publish a new release into Github
    github_release = set_github_release(
    	api_token: ENV["GITHUB_TOKEN"],
    	repository_name: "openhab/openhab-ios",
        name: "#{type.capitalize} version #{version}",
        tag_name: "#{version}",
        description: changelog,
        commitish: "master"
        # upload_assets: no assets supported
    )
    build_app(scheme: "openHAB",
              clean: true,
              export_method: "app-store")
    upload_to_testflight(
        distribute_external: true,
        notify_external_testers: true,
        changelog: changelog,
        groups: ["Beta Testers"]
    )

  end

end
